// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	servicea "cadana-backend/internal/clients/servicea"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockServiceAClient is an autogenerated mock type for the ServiceAClient type
type MockServiceAClient struct {
	mock.Mock
}

// ExchangeRate provides a mock function with given fields: ctx, requestBody
func (_m *MockServiceAClient) ExchangeRate(ctx context.Context, requestBody servicea.ExchangeRateRequestBody) (*servicea.ExchangeRateResponse, error) {
	ret := _m.Called(ctx, requestBody)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeRate")
	}

	var r0 *servicea.ExchangeRateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, servicea.ExchangeRateRequestBody) (*servicea.ExchangeRateResponse, error)); ok {
		return rf(ctx, requestBody)
	}
	if rf, ok := ret.Get(0).(func(context.Context, servicea.ExchangeRateRequestBody) *servicea.ExchangeRateResponse); ok {
		r0 = rf(ctx, requestBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicea.ExchangeRateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, servicea.ExchangeRateRequestBody) error); ok {
		r1 = rf(ctx, requestBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockServiceAClient creates a new instance of MockServiceAClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceAClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceAClient {
	mock := &MockServiceAClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
